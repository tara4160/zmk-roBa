#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R      &kp T                                                     &kp Y       &kp U  &kp I      &kp O    &kp P
&kp A             &kp S         &kp D         &kp F      &kp G            &kp CAPSLOCK      &kp LEFT_PARENTHESIS   &kp H       &kp J  &lt 4 K    &kp L    &kp SEMI
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V      &kp B            &kp ESCAPE        &kp RIGHT_PARENTHESIS  &kp N       &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI  &lt 3 TAB  &lt 2 BACKSPACE  &lt 1 DELETE      &lt 6 SPACE            &kp RETURN                             &mt RIGHT_SHIFT MINUS
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp EXCL          &kp AT        &kp HASH      &kp DOLLAR  &kp PERCENT                         &kp CARET   &kp AMPS  &kp ASTRK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&trans            &trans        &trans        &trans      &trans       &trans      &trans     &trans      &trans    &trans     &trans                &trans
&kp F1            &kp F2        &kp F3        &kp F4      &kp F5       &kp F6      &kp F7     &kp F8      &kp F9    &kp F10    &kp F11               &kp F12
&kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI  &trans      &trans       &trans      &kp SPACE  &kp RETURN                                             &kp RIGHT_SHIFT
            >;
        };

        NUM {
            bindings = <
&kp TAB  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp BACKSPACE                                 &trans   &trans  &trans  &trans  &trans
&trans   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp MINUS      &trans              &trans     &trans   &trans  &trans  &trans  &trans
&trans   &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PLUS       &kp KP_NUMLOCK      &trans     &trans   &trans  &trans  &trans  &trans
&trans   &kp KP_NUMBER_0  &kp PERIOD       &trans           &trans         &trans              &kp SPACE  &kp RET                          &trans
            >;
        };

        ARROW {
            bindings = <
&trans            &trans                  &kp LA(LC(UP))          &trans                   &trans                      &trans      &trans          &kp UP_ARROW    &trans           &trans
&trans            &kp LA(LC(LEFT_ARROW))  &kp LA(LC(DOWN_ARROW))  &kp LA(LC(RIGHT_ARROW))  &trans  &trans      &trans  &trans      &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans            &trans                  &trans                  &trans                   &trans  &trans      &trans  &trans      &trans          &trans          &trans           &trans
&kp LEFT_CONTROL  &kp LEFT_ALT            &kp LEFT_GUI            &trans                   &trans  &trans      &trans  &kp RETURN                                                   &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans            &trans        &trans            &kp LC(PAGE_UP)  &kp LC(PAGE_DOWN)                            &trans    &trans    &mkp MB3  &trans    &trans
&trans            &trans        &trans            &trans           &trans             &trans          &trans    &trans    &mkp MB1  &lt 4 K   &mkp MB2  &trans
&kp LEFT_SHIFT    &trans        &trans            &trans           &trans             &kp ESCAPE      &trans    &trans    &trans    &trans    &trans    &trans
&kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_COMMAND  &kp TAB          &trans             &trans          &mkp MB4  &mkp MB5                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &kp LA(LC(LG(Q)))      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans                 &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans                 &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
