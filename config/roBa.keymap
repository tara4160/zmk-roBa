#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        ShutDown_macOS {
            bindings = <&kp LA(LC(LG(P)))>;
            key-positions = <39 40>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
            lt_to_layer_0: lt_to_layer_0 {
                compatible = "zmk,behavior-hold-tap";
                label = "LAYER_TAP_TO_0";
                bindings = <&mo>, <&to_layer_0>;

                #binding-cells = <2>;
                tapping-term-ms = <200>;

            encoder_msc_down_up: encoder_msc_down_up {
                compatible = "zmk,behavior-sensor-rotate";
                label = "ENCODER_MSC_DOWN_UP";
                #sensor-binding-cells = <0>;
                bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

                tap-ms = <20>;

            encoder_msc_up_down: encoder_msc_up_down {
                compatible = "zmk,behavior-sensor-rotate";
                label = "ENCODER_MSC_UP_DOWN";
                #sensor-binding-cells = <0>;
                bindings = <&msc SCRL_UP> , <&msc SCRL_DOWN>;

                tap-ms = <20>;
            };
        };
    };

    keymap {
        compatible = "zmk,keymap";

        for_macOS {
            bindings = <
&kp Q             &kp W         &kp E         &kp R    &kp T                                                 &kp Y       &kp U  &kp I      &kp O    &kp P
&kp A             &kp S         &kp D         &kp F    &kp G          &trans          &kp LEFT_PARENTHESIS   &kp H       &kp J  &kp K      &kp L    &kp SEMI
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V    &kp B          &kp ESCAPE      &kp RIGHT_PARENTHESIS  &kp N       &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI  &kp TAB  &kp BACKSPACE  &kp DELETE      &kp SPACE              &kp RETURN                             &mt RIGHT_SHIFT MINUS
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        for_Windows {
            bindings = <
&kp Q             &kp W         &kp E         &kp R    &kp T                                                 &kp Y      &kp U  &kp I      &kp O    &kp P
&kp A             &kp S         &kp D         &kp F    &kp G          &trans          &kp LEFT_PARENTHESIS   &kp H      &kp J  &kp K      &kp L    &kp SEMI
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V    &kp B          &kp ESCAPE      &kp RIGHT_PARENTHESIS  &kp N      &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LEFT_CONTROL  &kp LEFT_GUI  &kp LEFT_ALT  &kp TAB  &kp BACKSPACE  &kp DELETE      &kp SPACE              &kp ENTER                             &mt RIGHT_SHIFT MINUS
            >;
        };

        for_iPadOS {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        FUNCTION {
            bindings = <
&kp EXCL          &kp AT        &kp HASH      &kp DOLLAR  &kp PERCENT                         &kp CARET   &kp AMPS  &kp ASTRK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&trans            &trans        &trans        &trans      &trans       &trans      &trans     &trans      &trans    &trans     &trans                &kp SINGLE_QUOTE
&kp F1            &kp F2        &kp F3        &kp F4      &kp F5       &kp F6      &kp F7     &kp F8      &kp F9    &kp F10    &kp F11               &kp F12
&kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI  &trans      &trans       &trans      &kp SPACE  &kp RETURN                                             &kp RIGHT_SHIFT
            >;
        };

        NUM {
            bindings = <
&kp TAB  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp BACKSPACE                            &kp TAB          &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp BACKSPACE
&trans   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp MINUS      &trans         &trans     &trans           &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTRK
&trans   &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PLUS       &kp EQUAL      &kp EQUAL  &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp SLASH
&trans   &kp KP_NUMBER_0  &kp PERIOD       &trans           &trans         &trans         &trans     &trans                                                              &kp PERIOD
            >;
        };

        Mouse_Arrow {
            bindings = <
&trans  &trans  &trans  &trans  &trans                        &trans    &trans    &msc SCRL_DOWN  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans    &trans    &mkp MB1  &mkp MB2        &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &mkp MB4  &mkp MB5  &trans    &msc SCRL_UP    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans    &trans                                      &trans
            >;
        };

        ARROW {
            bindings = <
&trans            &trans          &kp UP          &trans           &trans                      &trans      &trans          &kp UP_ARROW    &trans           &trans
&trans            &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans      &trans  &trans      &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans            &trans          &trans          &trans           &trans  &trans      &trans  &trans      &trans          &trans          &trans           &trans
&kp LEFT_CONTROL  &kp LEFT_ALT    &kp LEFT_GUI    &trans           &trans  &trans      &trans  &kp RETURN                                                   &trans
            >;
        };

        BTset_Locks {
            bindings = <
&trans  &trans  &trans  &trans           &trans                                               &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans           &trans           &trans                 &trans       &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans           &trans           &trans                 &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &kp LOCKING_NUM  &kp LOCKING_NUM  &kp LA(LC(LG(P)))      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
